#!/bin/bash

# This file is handled by ansible

S3_BUCKET_NAME={{ backup_postgresql_bucket_name }}

do_log()
{
    echo $(date +"[ %d/%m/%Y - %H:%M:%S ] #")" $@"
}

do_log "Start backup"

# Secure check that dest repository is not empty.
# We don't want to run a rm if we have done a mistake in ansible config
if [ "x{{ backup_postgresql_local_path }}" == "x" ]; then
    do_log "Error backup_postgresql_local_path is empty"
    exit 1
fi

# Recreate the directory
mkdir -p {{ backup_postgresql_local_path }}

do_log "Start backup in {{ backup_postgresql_local_path }}"

# Get only line with | to filter line like : postgres=CTc/postgres
# Filter also template0 : pg_dump: [archiver (db)] connection to database "template0" failed: FATAL:  database "template0" is not currently accepting connections
BACKUP_STATUS=0
{% if backup_postgresql_databases is defined %}
DBS="{{ backup_postgresql_databases | join(' ') }}"
{% else %}
DBS=$(PGPASSWORD={{ backup_postgresql_password }} psql -h {{ backup_postgresql_host }}  -U {{ backup_postgresql_user }} -lAt --field-separator="|" | awk -F '|' '/^[^\|]+\|/{print $1}' | grep -v template | grep -v rdsadmin)
{% endif %}
if [[ $? != 0 ]]; then
    BACKUP_STATUS=1
fi

for DB in $DBS; do
  do_log "... dump database : $DB"
  {{ backup_postgresql_cmd }}
  if [[ $? != 0 ]]; then
      BACKUP_STATUS=1
  fi
done

if [[ $BACKUP_STATUS != 0 ]]; then
    do_log "ERROR backup"
    do_log "Cleanup old backup {{ backup_postgresql_local_path }}"
    rm -rf {{ backup_postgresql_local_path }}
    exit 1
fi
 
TIMESTAMP=$(date +%F-%H%M)
TAR_FILE=postgresqldb-{% if backup_postgresql_project is defined %}{{ backup_postgresql_project }}-{% endif %}$HOSTNAME-$TIMESTAMP.tar.gz

# Add timestamp to backup
tar -czf /tmp/$TAR_FILE -C {{ backup_postgresql_local_path }} .
 
do_log "Cleanup old backup {{ backup_postgresql_local_path }}"
rm -rf {{ backup_postgresql_local_path }}

# Upload to S3
do_log "Upload file on s3 s3://{{ backup_postgresql_bucket_name }}/{{ backup_postgresql_s3_path }}/$TAR_FILE"
aws s3 cp /tmp/$TAR_FILE  s3://{{ backup_postgresql_bucket_name }}/{{ backup_postgresql_s3_path }}/$TAR_FILE

UPLOAD_STATUS=$?

do_log "Remove tar file"
rm -f /tmp/$TAR_FILE

if [[ $UPLOAD_STATUS != 0 ]];then
    do_log "ERROR Upload tar /tmp/$TAR_FILE on s3 fail"
    exit 1
fi

